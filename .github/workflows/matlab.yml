name: MATLAB Tests
on:
  push:
    branches:
      - "main"
  pull_request:
  workflow_dispatch:

jobs:
  matlab-test:
    name: MATLAB Tests
    strategy:
      fail-fast: false
      matrix:
        version: ["R2024a"]
        # os: ["ubuntu-latest", "macos-13", "windows-latest"]
        os: ["ubuntu-latest"]
    runs-on: ${{matrix.os}}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          # submodules: "recursive"
          lfs: true

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: ${{matrix.version}}
          cache: true

      - name: Install build dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install perl

      - name: Set up Visual Studio Command Prompt (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install strawberryperl nasm
          # add NASM to path, isn't done automatically
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # - name: Build OpenSSL (Unix)
      #   if: runner.os != 'Windows'
      #   run: |
      #     cd deps/openssl
      #     ./config
      #     make
      #     mkdir -p ${{github.workspace}}/lib ${{github.workspace}}/include
      #     cp libcrypto.a libssl.a ${{github.workspace}}/lib/
      #     # cp -R include/openssl ${{github.workspace}}/include/
      #     cd ../..

      # - name: Build OpenSSL (Windows)
      #   if: runner.os == 'Windows'
      #   run: |
      #     cd deps/openssl
      #     perl Configure VC-WIN64A
      #     nmake
      #     mkdir -p ${{github.workspace}}/lib ${{github.workspace}}/include
      #     copy libcrypto_static.lib ${{github.workspace}}/lib
      #     copy libssl_static.lib ${{github.workspace}}/lib
      #     # xcopy /E /I include\openssl ${{github.workspace}}/include\openssl
      #     cd ../..

      # - name: Unzip and Build zlib (Unix)
      #   if: runner.os != 'Windows'
      #   run: |
      #     cd deps
      #     unzip zlib1213.zip
      #     cd zlib-1.2.13
      #     ./configure
      #     make
      #     cp libz.a ${{github.workspace}}/lib/
      #     # cp zlib.h zconf.h ${{github.workspace}}/include/
      #     cd ../..

      # - name: Unzip and Build zlib (Windows)
      #   if: runner.os == 'Windows'
      #   run: |
      #     cd deps
      #     7z x zlib1213.zip
      #     cd zlib-1.2.13
      #     nmake -f win32/Makefile.msc
      #     copy zlib.lib ${{github.workspace}}/lib
      #     # copy zlib.h zconf.h ${{github.workspace}}/include
      #     cd ../..

      - name: Compile MEX file
        uses: matlab-actions/run-command@v1
        with:
          command: compile_bdms_mex

      - name: Get MEX extension on Linux/macOS
        if: runner.os != 'Windows'
        run: echo "MEXEXT=$(mexext)" >> $GITHUB_ENV

      - name: Get MEX extension on Windows
        if: runner.os == 'Windows'
        run: echo "MEXEXT=$(mexext.bat)" >> $env:GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bdms-artifacts-${{runner.os}}-${{matrix.version}}
          path: |
            ./**/*.${{env.MEXEXT}}
            ./lib/*
          retention-days: 5
